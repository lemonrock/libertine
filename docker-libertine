#!/usr/bin/env sh
# This file is part of libertine. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT. No part of libertine, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of libertine. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT.


set -e
set -u
set -f


_program_path_find()
{
	if [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi

	else

		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}

		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi

		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"

				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$0"

				while [ -L "$scriptPath" ]
				do
					_program_path_find_parentPath
					scriptPath="$(readlink "$scriptPath")"
				done

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"

				_program_path_find_parentPath
				pwd -P
			)
		fi

	fi
}

docker_build()
{
	local imageId
	docker images --all --format '{{.Repository}}_{{.Tag}}\t{{.ID}}' | awk '$1 ~ /^<none>_'"$dockerName"'<none>$/ {print $2}' | while IFS= read -r imageId
	do
		docker rmi "$imageId"
	done
	
	cd "$dockerBuildFolderPath" 1>/dev/null 2>/dev/null

		docker build --force-rm --rm --tag "$dockerName" "$dockerBuildFolderPath"
		
	cd - 1>/dev/null 2>/dev/null
}

build_dockerRun()
{
	cd "$dockerBuildFolderPath" 1>/dev/null 2>/dev/null
		
	set -x
		exec docker run --rm --tty --volume "$(pwd)"/../..:/root/libertine:cached --interactive "$dockerName" "$@"
		
	cd - 1>/dev/null 2>/dev/null	
}

docker_libertine_main()
{
	cd "$(_program_path_find)" 1>/dev/null 2>/dev/null
	
	
	local dockerName='libertine-build-environment'
	local dockerFolderPath="$(pwd)"/dockers
	local dockerBuildFolderPath="$dockerFolderPath"/"$dockerName"
	
	docker_build
	
	build_dockerRun "$@"
}

docker_libertine_main "$@"
