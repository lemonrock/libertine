#!/usr/bin/env sh
# This file is part of libertine. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT. No part of libertine, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016-2018 The developers of libertine. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT.


_program()
{	
	core_usesIn test_with_qemu qemu
	core_dependency_requires '*' sed tr qemu-system-x86_64
	test_with_qemu()
	{
		local machineFolderPath
		test_with_qemu_machineFolderPath

		local settingsFolderPath
		test_with_qemu_settingsFolderPath
		
		local qemuSettingsFolderPath
		test_with_qemu_qemuSettingsFolderPath

		local libertine_architecture
		test_with_qemu_libertine_architecture
		
		local SETTINGS_PATH="$qemuSettingsFolderPath"
		local MACHINE_PATH="$machineFolderPath"
		local MACHINE_NAME="$test_with_qemu_machine"
		
		local qemuDrivesConfigFilePath="$qemuSettingsFolderPath"/qemu-drives.config
		if [ -s "$qemuDrivesConfigFilePath" ]; then
			. "$qemuDrivesConfigFilePath"
		fi
		
		local TMP_FILE
		core_temporaryFiles_newFileToRemoveOnExit
		local commandLineFilePath="$TMP_FILE"
		{
			printf '%s' 'set -- -no-user-config '
			
			local qemuDeviceConfigFilePath="$qemuSettingsFolderPath"/qemu.config
			if [ -s "$qemuDeviceConfigFilePath" ]; then
				local qemuGeneratedDeviceConfigFilePath
				test_with_qemu_fillInTemplateConfiguration
				printf '%s' 'set -- "$@" -readconfig "$qemuGeneratedDeviceConfigFilePath" '
			fi
			
			local qemuCommandLineConfigFilePath="$qemuSettingsFolderPath"/qemu-command-line.config
			if [ -s "$qemuCommandLineConfigFilePath" ]; then
				printf ' '
				sed -e '/^\s*$/d' -e '/^\s*#/d' "$qemuCommandLineConfigFilePath" | tr '\n' ' '
			fi
			
			printf '\n'
			
			printf '%s\n' 'exec qemu-system-"$libertineArchitecture" "$@"'
		} >"$commandLineFilePath"
		
		. "$commandLineFilePath"
	}
}

_program_path_find()
{
	if [ "${_program_fattening_program_path+set}" = 'set' ]; then
		printf '%s\n' "$_program_fattening_program_path"

	elif [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi

	else

		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}

		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi

		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"

				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$0"

				while [ -L "$scriptPath" ]
				do
					_program_path_find_parentPath
					scriptPath="$(readlink "$scriptPath")"
				done

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"

				_program_path_find_parentPath
				pwd -P
			)
		fi

	fi
}

_program_name='test-with-qemu'
_program_namespace='test_with_qemu'
_program_version='unversioned'
_program_package_or_build=''
_program_path="$(_program_path_find)"
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_entrypoint='test_with_qemu'

_program_commandLine_parseInitialise()
{
	_program_default_machine='example'
	_program_default_machinesPath="$_program_path"/machines
	_program_default_force=false
}

_program_commandLine_helpMessage()
{
	_program_commandLine_helpMessage_usage="[OPTION]... -- KERNEL ARGS..."
	_program_commandLine_helpMessage_description="Runs a Libertine Linux kernel in QEMU"
	_program_commandLine_helpMessage_options="
  -m, --machine NAME        Defaults to ${_program_default_machine}.
  -p, --machines-path PATH  PATH to parent folder of machine. Defaults to ${_program_default_machinesPath}
  -f, --force               Force recreation of disks. Defaults to ${_program_default_force}."
    _program_commandLine_helpMessage_optionsSpacing='   '
	_program_commandLine_helpMessage_configurationKeys="
  test_with_qemu_machine       Equivalent to --machine
  test_with_qemu_machinesPath  Equivalent to --machines-path
"
	_program_commandLine_helpMessage_examples="
  ${_program_name} -- root=/dev/vda
"
}
_program_commandLine_optionExists()
{
	case "$optionName" in
		
		m|machine)
			echo 'yes-argumented'
		;;
		
		p|machines-path)
			echo 'yes-argumented'
		;;
		
		f|force)
			echo 'yes-argumentless'
		;;
		
		*)
			echo 'no'
		;;
		
	esac
}

_program_commandLine_processOptionWithoutArgument()
{
	case "$optionName" in
		
		f|force)
			test_with_qemu_force=true
		;;
		
	esac
}

_program_commandLine_processOptionWithArgument()
{
	case "$optionName" in
		
		m|machine)
			test_with_qemu_machine="$optionValue"
		;;
		
		m|machines-path)
			core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			test_with_qemu_machinesPath="$optionValue"
		;;
		
	esac
}

_program_commandLine_handleNonOptions()
{
	core_variable_array_initialise test_with_qemu_nonOptions
	core_variable_array_append test_with_qemu_nonOptions "$@"
}

_program_commandLine_validate()
{
	if core_variable_isUnset test_with_qemu_machine; then
		test_with_qemu_machine="$_program_default_machine"
	else
		:
	fi
		
	if core_variable_isUnset test_with_qemu_machinesPath; then
		test_with_qemu_machinesPath="$_program_default_machinesPath"
	else
		core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_CONFIG 'configuration setting' 'test_with_qemu_machinesPath' "$test_with_qemu_machinesPath"
	fi
	
	if core_variable_isUnset test_with_qemu_force; then
		test_with_qemu_force="$_program_default_force"
	else
		:
	fi
}

# Assumes pwd, and so requires this code to be running from this folder
. "$_program_libPath"/shellfire/core/init.functions "$@"
