# This file is part of libertine. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT. No part of libertine, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright © 2016 The developers of libertine. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT.

libertine_path_installBuildBinariesProvided()
{
	local count=0
	pushd "$(libertine_public_buildProvidesPath)"

		set +f
		local binaryProvidedFolderPath
		for binaryProvidedFolderPath in "$libertine_machineCacheOutputFolderPath"/"$package"/build_provides/*
		do
			set -f
		
			if [ ! -d "$binaryProvidedFolderPath" ]; then
				continue
			fi
			
			if [ $count -eq 0 ]; then
				core_message INFO "      Providing binaries"
			fi
			
			count=$((count+1))
			
			local binaryProvided="${binaryProvidedFolderPath##*/}"
		
			local relativeBinaryPath=../build-sysroot/usr/bin/"$binaryProvided"
				
			if [ ! -f "$relativeBinaryPath" ]; then
				core_exitError $core_commandLine_exitCode_UNAVAILABLE "          Provided build binary (assumed to be in usr/bin) '$binaryProvided' is not a file at '$(pwd)/$relativeBinaryPath' for package '$package'"
			fi
			
			if [ ! -x "$relativeBinaryPath" ]; then
				core_exitError $core_commandLine_exitCode_UNAVAILABLE "          Provided build binary (assumed to be in usr/bin) '$binaryProvided' is not executable at '$(pwd)/$relativeBinaryPath' for package '$package'"
			fi
			core_message INFO "          Providing binary '$binaryProvided' to build downstream packages"
		
			ln -s "$relativeBinaryPath" "$binaryProvided"
	
		done
		set -f
		
	popd
	
	case $count in
		
		0)
			core_message INFO "      Package does not provide any binaries"
		;;
		
		1)
			core_message INFO "      Provided 1 binary"
		;;
		
		*)
			core_message INFO "      Provided $count binaries"
		;;
		
	esac
}

libertine_path_fakePkgConfig_forBuild()
{
	local shellFilePath="$1"
	local binFilePath="$2"
	local inputSysroot="$3"
	
	local dollarArgs='$@'
	
	{
		cat <<-EOF
			#!${shellFilePath}
			# This file is part of libertine. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT. No part of libertine, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
			# Copyright © 2016 The developers of libertine. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT.


			set -e
			set -u
			set -f
			
			unset PKG_CONFIG_NO_OS_CUSTOMIZATION
			unset PKG_CONFIG_PATH
			unset PKG_CONFIG_ALLOW_SYSTEM_CFLAGS
			unset PKG_CONFIG_ALLOW_SYSTEM_LIBS
			unset LD_LIBRARY_PATH
			unset C_INCLUDE_PATH
			unset LD_RUN_PATH
			unset LD
			
			export PKG_CONFIG_LIBDIR='${inputSysroot}/usr/lib/pkgconfig':'${inputSysroot}/usr/share/pkgconfig'
			exec pkg-config-original "${dollarArgs}"
		EOF
	} >"$binFilePath"
	chmod +x "$binFilePath"
}

libertine_path_fakeUname_forBuild()
{
	local shellFilePath="$1"
	local binFilePath="$2"
	
	_libertine_path_fakeUname "$shellFilePath" "$binFilePath" "$libertine_buildUnameArchitecture" "$libertine_buildUnameOperatingSystem" "$libertine_buildUnameTimestamp" "$libertine_buildUnameHostName"
}

libertine_path_fakeUname_forHost()
{
	local shellFilePath="$1"
	local binFilePath="$2"
	
	_libertine_path_fakeUname "$shellFilePath" "$binFilePath" "$libertine_hostUnameArchitecture" "$libertine_hostUnameOperatingSystem" "$libertine_hostUnameTimestamp" "$libertine_hostUnameHostName"
}

core_dependency_requires '*' cat chmod sh
_libertine_path_fakeUname()
{
	local shellFilePath="$1"
	local binFilePath="$2"
	local architecture="$3"
	local operatingSystem="$4"
	local timestamp="$5"
	local hostName="$6"
	
	local kernelName="$operatingSystem"
	local osName="$operatingSystem"
	
	# This, obviously, won't match the actual version of linux we are building. However, it does encode (a) it's modern and (b) it's grsecurity enabled
	# If necessary, over time, we can adjust this slightly. It is possible to extract the version of linux we're building (see packages/linux/linux-patches/apply-patches, function apply_patches_findLinuxVersion)
	# However, for that to be accurate, it would have to be extracted to its own little script and run only after linux has been patched. Quite complex.
	# We are only faking uname for the small number of tools (eg git, I'm looking at you) that use it to work out how to change settings even when cross-compiling...
	local kernelVersion='4.4.35-0-grsec'
	
	{
		cat <<EOF
#!${shellFilePath}
# This file is part of libertine. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT. No part of libertine, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright © 2016 The developers of libertine. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT.


set -e
set -u
set -f

hostName='${hostName}'
architecture='${architecture}'
kernelName='${kernelName}'
osName='${osName}'
kernelVersion='#1-Libertine SMP ${timestamp}'
kernelRelease='${kernelVersion}'

EOF
		cat <<'EOF'
uname_main()
{
	local hostName='libertine'
	local processorType='unknown'
	local hardwarePlatform='unknown'

	if [ $# -eq 0 ]; then
		printf '%s\n' "$kernelName"
		return 0
	fi

	while [ $# -ne 0 ]
	do
		case "$1" in

			-a)
				printf '%s %s %s %s %s %s\n' "$kernelName" "$hostName" "$kernelRelease" "$kernelVersion" "$architecture" "$osName"
			;;

			-m)
				printf '%s\n' "$architecture"
			;;

			-n)
				printf '%s\n' "$hostName"
			;;

			-r)
				printf '%s\n' "$kernelRelease"
			;;

			-s)
				printf '%s\n' "$kernelName"
			;;

			-p)
				printf '%s\n' "$processorType"
			;;

			-v)
				printf '%s\n' "$kernelVersion"
			;;

			-i)
				printf '%s\n' "$hardwarePlatform"
			;;

			-o)
				printf '%s\n' "$osName"
			;;
			
			*)
				# Will printf '-x' but should actually print 'x' for %s
				printf 'uname: unrecognized option: %s\n' "$1" 1>&2
				exit 1
			;;

		esac
		
		shift 1
	done
}

uname_main "$@"
EOF
	} >"$binFilePath"
	
	chmod +x "$binFilePath"
}

core_dependency_requires '*' cat chmod sh
libertine_path_fakeHostname_forBuild()
{
	local shellFilePath="$1"
	local binFilePath="$2"
	
	local hostName="$libertine_buildUnameHostName"
	local domainName="$libertine_buildUnameDomainName"
	
	{
		cat <<EOF
#!${shellFilePath}
# This file is part of libertine. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT. No part of libertine, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright © 2016 The developers of libertine. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT.


set -e
set -u
set -f

hostName='${hostName}'
domainName='${domainName}'
ipAddress='127.0.0.1'
EOF
		cat <<'EOF'
hostname_main()
{
	if [ $# -eq 0 ]; then
		printf '%s\n' "$hostName"
		return 0
	fi
	
	case "$1" in
		
		-i)
			printf '%s\n' "$ipAddress"
		;;
		
		-s)
			printf '%s\n' "$hostName"
		;;
		
		-f)
			printf '%s\n' "$hostName"."$domainName"
		;;
		
	esac
}

hostname_main "$@"
EOF
	} >"$binFilePath"
	
	chmod +x "$binFilePath"
}

core_dependency_requires '*' cat chmod sh
libertine_path_fakeDnsdomainname_forBuild()
{
	local shellFilePath="$1"
	local binFilePath="$2"
	
	local domainName="$libertine_buildUnameDomainName"
	
	cat >"$binFilePath" <<EOF
#!${shellFilePath}
# This file is part of libertine. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT. No part of libertine, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright © 2016 The developers of libertine. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT.


set -e
set -u
set -f

printf '%s\n' '$domainName'
EOF
	chmod +x "$binFilePath"
}

libertine_path_essentialBinaries()
{
	local callback="$1"
	shift 1
	
	local alreadyHandledProgramNames
	local alreadyHandledProgramNames_initialised
	core_variable_array_initialise alreadyHandledProgramNames
	
	local packageManager
	local programName
	local alreadyInstalledProgramName
	local originalIFS="$IFS"
	local IFS=' '
	while IFS=' ' read -r packageManager programName
	do
		IFS="$originalIFS"
		case "$packageManager" in
			
			'*'|"$core_dependency_packageManager")
				packageManager="$core_dependency_packageManager"
				if core_variable_array_contains alreadyHandledProgramNames "$programName"; then
					continue
				fi
				core_variable_array_append alreadyHandledProgramNames "$programName"
				
				case "$programName" in
					
					# Miscellaneous code brought in by shellfire that is almost certainly not needed ordinarily
					apk|apt-get|rpm|urpmi|pkg|pkgin|pkg_add|emerge|kill|sudo)
						:
					;;
			
					*)
						${callback} "$programName" "$@"
					;;
		
				esac
			;;

			# Because of the heredoc, there's an extra blank line. A messy alternative is https://unix.stackexchange.com/questions/102891/posix-compliant-way-to-work-with-a-list-of-filenames-possibly-with-whitespace
			'')
				break
			;;
			
			*)
				continue
			;;
			
		esac
	done <<-EOF
		${_core_dependency_requires}
	EOF
	IFS="$originalIFS"

	local programName
	for programName in sh env
	do
		if core_variable_array_contains alreadyHandledProgramNames "$programName"; then
			continue
		fi
		core_variable_array_append alreadyHandledProgramNames "$programName"
		
		${callback} "$programName" "$@"
	done
}

_libertine_path_exportPATH_findHostBinaryAlternativePath()
{
	local binaryNeeded="$1"
	shift 1
	
	local alternativeBinary
	for alternativeBinary in "$@"
	do
		local hostPath="$(_libertine_path_exportPATH_findHostBinaryPath "$alternativeBinary")"
		if [ -n "$hostPath" ]; then
			core_message INFO "          Using alt  binary '$binaryNeeded' alternative '$alternativeBinary' from host PATH at '$hostPath' to build '$package'"

			pushd "$ourPATH"
				ln -s "$hostPath" "$binaryNeeded"
			popd
			return 0
		fi
	done
	
	core_exitError $core_commandLine_exitCode_OSFILE "      Could not find a package that provides, or in the default PATH, the binary '$binaryNeeded' needed to build the package '$package' in PATH '$PATH' or an alternative"
}

_libertine_path_exportPATH_findHostBinaryPath()
{
	local binaryNeeded="$1"
	
	# Done this way, rather than with command -v "$binaryNeeded", as builtings like echo and print foul-up
	local IFS=':'
	set -- $PATH
	
	local path
	for path in "$@"
	do
		if [ -n "$path" ]; then
			local hostPath="$path"/"$binaryNeeded"
			if [ -x "$hostPath" ]; then
				printf '%s' "$hostPath"
			fi
		fi
	done
}

core_dependency_requires '*' cat chmod sh
_libertine_path_exportPATH_wrapHostBinaryAlternativePathForGrep()
{
	local binaryNeeded="$1"
	local switch="$2"
	
	if [ ! -x "$ourPATH"/grep ]; then
		_libertine_path_exportPATH_findNeededBinary "$ourPATH" 'grep' "$package"
	fi
	
	local shellFilePath="$ourPATH"/sh
	local grepFilePath="$ourPATH"/grep
	{
		cat <<EOF
#!${shellFilePath}
# This file is part of libertine. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT. No part of libertine, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright © 2016 The developers of libertine. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT.


set -e
set -u
set -f

grepFilePath='${grepFilePath}'
switch='${switch}'
EOF
	cat <<'EOF'
exec '${grepFilePath}' '${switch}' "$@"
EOF
	} >"$ourPATH"/"$binaryNeeded"
	chmod +x "$ourPATH"/"$binaryNeeded"
}

core_dependency_requires '*' ln
_libertine_path_exportPATH_findNeededBinary()
{
	local ourPATH="$1"
	local binaryNeeded="$2"
	local package="$3"
	
	local binariesUsedLogFolderPath="$(libertine_public_outputPath)"/binaries-used.log
	
	case "$binaryNeeded" in
		
		uname)
			core_message INFO "          Using fake binary '$binaryNeeded' to build '$package'"
			
			printf "Using fake binary '%s'\n" "$binaryNeeded" >>"$binariesUsedLogFolderPath"
			
			libertine_path_fakeUname_forBuild "$ourPATH"/sh "$ourPATH"/fake-uname-build
			ln -s fake-uname-build "$ourPATH"/uname
			return 0
		;;
		
		hostname)
			core_message INFO "          Using fake binary '$binaryNeeded' to build '$package'"
			
			printf "Using fake binary '%s'\n" "$binaryNeeded" >>"$binariesUsedLogFolderPath"
			
			libertine_path_fakeHostname_forBuild "$ourPATH"/sh "$ourPATH"/fake-hostname-build
			ln -s fake-hostname-build "$ourPATH"/hostname
			return 0
		;;
		
		dnsdomainname)
			core_message INFO "          Using fake binary '$binaryNeeded' to build '$package'"
			
			printf "Using fake binary '%s'\n" "$binaryNeeded" >>"$binariesUsedLogFolderPath"
			
			libertine_path_fakeDnsdomainname_forBuild "$ourPATH"/sh "$ourPATH"/fake-dnsdomainname-build
			ln -s fake-dnsdomainname-build "$ourPATH"/dnsdomainname
			return 0
		;;
		
		pkg-config)
			core_message INFO "          Using fake binary '$binaryNeeded' to build '$package'"
			
			printf "Using fake binary '%s'\n" "$binaryNeeded" >>"$binariesUsedLogFolderPath"
			
			libertine_path_fakePkgConfig_forBuild "$ourPATH"/sh "$ourPATH"/fake-pkg-config-build "$(libertine_public_inputSysrootPath "$package")"
			ln -s fake-pkg-config-build "$ourPATH"/pkg-config
			
			# NOTE: No return, now we try to depend on pkg-config-original
			binaryNeeded='pkg-config-original'
		;;
		
	esac
	
	set +f
	local dependentPackageFolderPath
	for dependentPackageFolderPath in "$libertine_machineCacheOutputFolderPath"/"$package"/depends/*
	do
		set -f
		
		# Has no dependencies (or rubbish)
		if [ ! -d "$dependentPackageFolderPath" ]; then
			continue
		fi
		
		local dependentPackage="${dependentPackageFolderPath##*/}"
		local dependentPackageHasExecutable="$(libertine_public_outputPath "$dependentPackage")"/build-provides/"$binaryNeeded"
		
		if [ -x "$dependentPackageHasExecutable" ]; then
			
			local relativePath="$(libertine_public_relativeOutputPath "$dependentPackage")"/build-provides/"$binaryNeeded"

			pushd "$ourPATH"
				core_message INFO "          Using our  binary '$binaryNeeded' from dependent package '$dependentPackage' to build '$package'"
			
				printf "Using our  binary '%s' from dependendent package '%s'\n" "$binaryNeeded" "$dependentPackage" >>"$binariesUsedLogFolderPath"
			
				ln -s "$relativePath" "$binaryNeeded"
			popd
			
			return 0
		fi
		
	done
	set -f
	
	# Not provided by any depends package, search on default PATH
	
	local hostPath="$(_libertine_path_exportPATH_findHostBinaryPath "$binaryNeeded")"
	if [ -n "$hostPath" ]; then
		core_message INFO "          Using host binary '$binaryNeeded' from host PATH at '$hostPath' to build '$package'"

		printf "Using host binary '%s' from host PATH at '%s'\n" "$binaryNeeded" "$hostPath" >>"$binariesUsedLogFolderPath"

		pushd "$ourPATH"
			ln -s "$hostPath" "$binaryNeeded"
		popd
		return 0
	fi
	
	# Try to find an alternative that should provide basic functionality
	case "$binaryNeeded" in
		
		cc)
			printf "Using one of '%s' from host PATH to provide '%s'\n" 'cc clang gcc' "$binaryNeeded" >>"$binariesUsedLogFolderPath"
			
			_libertine_path_exportPATH_findHostBinaryAlternativePath cc clang gcc
		;;
		
		c++)
			printf "Using one of '%s' from host PATH to provide '%s'\n" 'c++ clang++ g++' "$binaryNeeded" >>"$binariesUsedLogFolderPath"
			
			_libertine_path_exportPATH_findHostBinaryAlternativePath c++ clang++ g++
		;;
	
		awk)
			printf "Using one of '%s' from host PATH to provide '%s'\n" 'awk gawk mawk nawk' "$binaryNeeded" >>"$binariesUsedLogFolderPath"
			
			_libertine_path_exportPATH_findHostBinaryAlternativePath awk gawk mawk nawk
		;;
	
		sh)
			printf "Using one of '%s' from host PATH to provide '%s'\n" 'sh dash ash bash mksh pdksh ksh88' "$binaryNeeded" >>"$binariesUsedLogFolderPath"
			
			_libertine_path_exportPATH_findHostBinaryAlternativePath sh dash ash bash mksh pdksh ksh88
		;;
		
		egrep)
			printf "Trying to wrap grep -E with shell script or find egrep from host PATH\n" >>"$binariesUsedLogFolderPath"
			
			_libertine_path_exportPATH_wrapHostBinaryAlternativePathForGrep egrep -E
		;;
		
		fgrep)
			printf "Trying to wrap grep -F with shell script or find fgrep from host PATH\n" >>"$binariesUsedLogFolderPath"
			
			_libertine_path_exportPATH_wrapHostBinaryAlternativePathForGrep fgrep -F
		;;
		
		*)
			core_exitError $core_commandLine_exitCode_OSFILE "          Could not find a package that provides, or in the default PATH, the binary '$binaryNeeded' needed to build the package '$package' in PATH '$PATH'"
		;;
		
	esac
}

core_dependency_requires '*' mkdir
libertine_path_exportPATH()
{
	local ourPATH="$(libertine_public_buildNeedsPath "$package")"
	mkdir -m 0755 -p "$ourPATH"
	
	core_message INFO "      Finding binaries to build '$package'"
	
	set +f
	local binaryNeededFolderPath
	for binaryNeededFolderPath in "$libertine_machineCacheOutputFolderPath"/"$package"/build_needs/*
	do
		set -f

		if [ ! -d "$binaryNeededFolderPath" ]; then
			continue
		fi
		
		local binaryNeeded="${binaryNeededFolderPath##*/}"

		_libertine_path_exportPATH_findNeededBinary "$ourPATH" "$binaryNeeded" "$package"
		
	done
	set -f
	
	export PATH="$ourPATH"
}
