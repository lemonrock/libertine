# This file is part of libertine. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT. No part of libertine, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of libertine. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT.


core_usesIn libertine git

core_dependency_requires '*' mkdir
libertine_hash_computePackageHashForDotMachineSpecialPackage()
{
	local hashCalculationFolderPath="$(_libertine_hash_hashCalculationFolderPath .machine)"
	mkdir -m 0700 -p "$hashCalculationFolderPath"
	
	local computedHashResultFilePath="$(_libertine_hash_computedHashResultFilePath .machine)"
	printf '.machine-0' >"$computedHashResultFilePath"
}

core_dependency_requires '*' mkdir cat cp
libertine_hash_computePackageHash()
{
	local package="$1"

	core_message INFO "    Calculating hash for package '$package'"
	
	local hashCalculationFolderPath="$(_libertine_hash_hashCalculationFolderPath "$package")"
	mkdir -m 0700 -p "$hashCalculationFolderPath"
	
	local computedHashResultFilePath="$(_libertine_hash_computedHashResultFilePath "$package")"
	if [ -s "$computedHashResultFilePath" ]; then
		return 0
	fi
	
	# From machine:-
	# 	Presence & content of "$package".config or "$package".mk or "$package"/
	# 	Presence & contents of architecture.config and networking.config
	# 	Presence & contents of compiler-flags/
	local configurationFileName
	set +f
	for configurationFileName in "$package".config "$package".mk "$package"/*
	do
		set -f
		local configurationFilePath="$libertine_machinePackageConfigurationsFolderPath"/"$configurationFileName"
		if [ -f "$configurationFilePath" ]; then
			cp "$configurationFilePath" "$hashCalculationFolderPath"
		fi
	done
	set -f
	
	local architectureFilePath="$libertine_machineSettingsFolderPath"/architecture.config
	if [ -f "$architectureFilePath" ]; then
		cp "$architectureFilePath" "$hashCalculationFolderPath"
	fi
	
	local networkingFilePath="$libertine_machineSettingsFolderPath"/networking.config
	if [ -f "$networkingFilePath" ]; then
		cp "$networkingFilePath" "$hashCalculationFolderPath"
	fi
	
	mkdir -m 0700 -p "$hashCalculationFolderPath"/compiler-flags
	local file
	for file in build-c.compiler-flags build-cxx.compiler-flags host-c.compiler-flags host-cxx.compiler-flags
	do
		cp "$libertine_machineSettingsFolderPath"/compiler-flags/"$file" "$hashCalculationFolderPath"/compiler-flags
	done
	
	# For linux package only, additionally from machine:-
	# 	initramfs/ folder (presence, contents)
	# 	initramfs.contents (presence, contents)
	# 	packages.list (presence, contents)
	if [ "$package" = 'linux' ]; then
		mkdir -m 0700 -p "$hashCalculationFolderPath"/initramfs
		if [ -d "$libertine_machineSettingsFolderPath"/initramfs ]; then
			cp -a -f -H "$libertine_machineSettingsFolderPath"/initramfs/. "$hashCalculationFolderPath"/initramfs/
		fi
		
		if [ -f "$libertine_machineSettingsFolderPath"/initramfs.contents ]; then
			cp "$libertine_machineSettingsFolderPath"/initramfs.contents "$hashCalculationFolderPath"
		fi
		
		if [ -f "$libertine_machineSettingsFolderPath"/packages.list ]; then
			cp "$libertine_machineSettingsFolderPath"/packages.list "$hashCalculationFolderPath"
		fi
	fi
	
	# From package:-
	#	(a) Has a .git file: Git hash (ignores local changes)
	#	(b) Has a .git folder: Git hash (ignores local changes)
	#	(c) No git folder: Full filesystem hash
	local useDotGitFileOrFolder='true'
	local computedPackageGitHash="$(_libertine_hash_hashValueOfFiles "$(libertine_public_originalPackagePath)" "$useDotGitFileOrFolder")"
	
	printf '%s' "$computedPackageGitHash" >"$hashCalculationFolderPath"/input-files-hash
	
	# Compute hashes of dependencies and copy in
	local dependenciesHashCalculationFolderPath="$hashCalculationFolderPath"/dependencies
	mkdir -m 0700 -p "$dependenciesHashCalculationFolderPath"
	set +f
	local dependentPackageFolderPath
	for dependentPackageFolderPath in "$libertine_machineCacheOutputFolderPath"/"$package"/depends/*
	do
		set -f
		
		if [ ! -d "$dependentPackageFolderPath" ]; then
			continue
		fi
		
		local dependentPackage="${dependentPackageFolderPath##*/}"
		
		libertine_hash_computePackageHash "$dependentPackage"
	
		local dependentFilePath="$(_libertine_hash_computedHashResultFilePath "$dependentPackage")"
		cp "$dependentFilePath" "$dependenciesHashCalculationFolderPath"/"$dependentPackage".computed-hash-result
		
	done
	set -f
	
	# Now compute the hash value of our inputs into "$computedHashResultFilePath"
	local useDotGitFileOrFolder='false'
	local ourHashOfAllInputs="$(_libertine_hash_hashValueOfFiles "$hashCalculationFolderPath" "$useDotGitFileOrFolder")"
	printf '%s' "$ourHashOfAllInputs" >"$computedHashResultFilePath"

	core_message INFO "    Calculated hash of '$ourHashOfAllInputs' for package '$package'"
}

libertine_hash_forPackage()
{
	local package="$1"
	
	packageHash="$(cat "$(_libertine_hash_computedHashResultFilePath "$package")")"
}

core_dependency_requires '*' sha256sum awk cut
_libertine_hash_cryptographicHashThatWorksWithLinuxsOutOfDate127CharacterLimitForSheBangInterpreter()
{
	local path="$1"
	sha256sum "$path" | awk '{print $1}' | cut -c 1-8
}

core_dependency_requires '*' find xargs stat sha256sum sort awk rm
_libertine_hash_hashValueOfFiles()
{
	local path="$1"
	local useDotGitFileOrFolder="$2"
	
	if [ ! -e "$path" ]; then
		printf 'm'
		return 0
	fi
		
	if [ -f "$path" ]; then
		printf '%s' "$(_libertine_hash_cryptographicHashThatWorksWithLinuxsOutOfDate127CharacterLimitForSheBangInterpreter "$path")"
		return 0
	fi
	
	if [ -d "$path" ]; then
		if $useDotGitFileOrFolder; then
			local revision="$(libertine_git_folderGitVersion "$path")"
			if [ -n "$revision" ]; then
				printf '%s' "$revision"
				return 0
			fi
		fi
		
		local TMP_FILE
		core_temporaryFiles_newFileToRemoveOnExit
		local hashesFilePath="$TMP_FILE"
		
		pushd "$path"
	
			{
				# -mindepth 1 excludes '.'
		
				# File system structure
				find . -mindepth 1 ! -name .git -print0 | xargs -0 -r stat -c '%N %a %s %T %t %F'
	
				# File contents
				find . -mindepth 1 ! -name .git -type f -print0 | xargs -0 -r sha256sum
	
				# Contents, if any, of symlinks to files, otherwise errors (as a symlink may change from pointing to a file to a folder to an invalid location, etc)
				find . -mindepth 1 ! -name .git -type l -print0 | xargs -0 -r sha256sum 2>&1 || true

			} | sort >>"$hashesFilePath"

			printf '%s' "$(_libertine_hash_cryptographicHashThatWorksWithLinuxsOutOfDate127CharacterLimitForSheBangInterpreter "$hashesFilePath")"

			# Cleaned up by exit, but can be quite large
			rm -rf "$hashesFilePath"
			
			return 0
			
		popd
	fi
	
	printf 'x'
}

_libertine_hash_hashCalculationFolderPath()
{
	if [ $# -eq 1 ]; then
		local packageToUse="$1"
	else
		local packageToUse="$package"
	fi
	printf '%s' "$libertine_machineCacheOutputFolderPath"/"$packageToUse"/hash-calculation
}

_libertine_hash_computedHashResultFilePath()
{
	if [ $# -eq 1 ]; then
		local package="$1"
	else
		local package="$package"
	fi
	printf '%s' "$libertine_machineCacheOutputFolderPath"/"$package"/computed-hash-result
}
