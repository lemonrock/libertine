# This file is part of libertine. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT. No part of libertine, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of libertine. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT.


core_dependency_requires '*' mkdir
libertine_env_cleanse()
{
	local TMP_FILE
	core_temporaryFiles_newFileToRemoveOnExit
	local environmentVariablesDefined="$TMP_FILE"
	env >"$environmentVariablesDefined"
	
	local name
	local value
	while IFS='=' read -r name value
	do
		case "$name" in
			
			PATH|HOME|USER|LOGNAME|TMPDIR|PWD|OLDPWD)
				:
			;;
			
			# Set by us in core_init_setSaneEnvironmentDefaults
			LANG|LC_COLLATE|LC_CTYPE|LC_MESSAGES|LC_MONETARY|LC_NUMERIC|LC_TIME|LC_ALL)
				:
			;;
			
			# TODO: Need an expandable whitelist
			SSH_AUTH_SOCK|HOMEBREW_NO_ANALYTICS)
				:
			;;
			
			*)
				unset "$name"
			;;
			
		esac
		
	done <"$environmentVariablesDefined"
	
	# autoconf
	export NULLCMD=:
	export PATH_SEPARATOR=:
	export RANDOM=0
	
	# libtool
	export LT_SYS_LIBRARY_PATH='/usr/lib'
	
	# ccache
	export CCACHE_COMPRESS=""
	export CCACHE_DIR="$libertine_ccachePath"
	mkdir -m 0755 -p "$CCACHE_DIR"
	
	cat >"$CCACHE_DIR"/ccache.conf <<-EOF
		max_size = 30G
		max_files = 0
		base_dir = ${libertine_machinesOutputFolderPath}
	EOF
}

libertine_env_cleanseBeforePackageCompile()
{
	local package="$1"
	
	local shellBinaryPath="$(libertine_public_buildNeedsPath "$package")"/sh
	
	if [ ! -x "$shellBinaryPath" ]; then
		core_exitError 1 "POSIX shell binary ('sh') does not exist at path '$shellBinaryPath'"
	fi
	
	# autoconf (and others)
	export SHELL="$shellBinaryPath"
	
	# autoconf
	export CONFIG_SHELL="$SHELL"
}

libertine_env_resetAfterNewInputSysroot()
{
	local inputSysrootPath="$1"
		
	# pkg-config
	export PKG_CONFIG_PATH="$inputSysrootPath"/usr/lib/pkgconfig:"$inputSysrootPath"/usr/share/pkgconfig
	export PKG_CONFIG_LIBDIR="$inputSysrootPath"/usr/lib/pkgconfig:"$inputSysrootPath"/usr/share/pkgconfig
}
