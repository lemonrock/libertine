# This file is part of montebianco. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/montebianco/master/COPYRIGHT. No part of montebianco, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of montebianco. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/montebianco/master/COPYRIGHT.


# (1) Special Keys (see http://doc.crates.io/build-script.html#outputs-of-the-build-script)

# TOML Key           Example                             In build.rs                                                  Explanation
# rustc-link-lib     rustc-link-lib = ["ssl", "crypto"]  "cargo:rustc-link-lib=ssl" \n "cargo:rustc-link-lib=crypto"  Effectively like passing -l <libname> to the linker in C
# rustc-link-search  rustc-link-search = ["/usr/lib"]    "cargo:rustc-link-search=/usr/lib"                           Effectively like passing -L to the linker in C
# rustc-flags        rustc-flags = ["-l", "curl"]        "cargo:rustc-flags=-l curl"                                  Effectively like passing custom flags to the linker in C (in this case, rust)
# rustc-cfg          rustc-cfg = ["libressl"]            "cargo:rustc-cfg=libressl"                                   Effectively like passing --cfg libressl to rustc, ie pass a cfg FEATURE when compiling rust code
# Also  rustc-link-lib may be specified as rustc-link-lib = ["static=curl"] to force static linking and other linking modes


# (2) Conventionally used keys for passing metadata to downstream (dependent) packages as DEP_FOO_<TOML Key>

# (2.1) Used to pass file locations. Not needed if downstream package uses a cargo .config override
# TOML Key           Example                             In build.rs                                                  Explanation
# root               root = "/usr"                       "cargo:root=/usr"                                            Passing a sysroot for a downstream package to use when linking (eg for libcurl to link with libssl).
# include            include = "/usr/include"]           "cargo:include=/usr/include"                                 Location of header files, typically needed when compiling a downstream package
# libdir             libdir = "/usr/lib"]                "cargo:libdir=/usr/lib"                                      Location of lib files (.a, .so, .lib, .dll), typically needed when compiling a downstream package.


# (2.2) Other things observed

# cargo:libressl="true"  openssl-sys/build.rs
# cargo:version="101"    openssl-sys/build.rs

# (3) Special Keys that don't belong in Cargo .config (see http://doc.crates.io/build-script.html#outputs-of-the-build-script)
# cargo:rerun-if-changed=xxxx.rs
# cargo:warning=Message


#[build]
#rustc = "rustc-workaround-for-build-scripts"
#target = "x86_64-unknown-linux-musl"
#rustflags = ["..", ".."]

[target.x86_64-unknown-linux-musl]
linker = "cc"

[target.x86_64-unknown-linux-musl.z]
rustc-link-search = ["/lib"]
rustc-link-lib = ["z"]
include = "/usr/include"
root = "/"
libdir = "/lib"

[target.x86_64-unknown-linux-musl.ssh2]
rustc-link-search = ["native=/usr/lib"]
rustc-link-lib = ["static=ssh2"]
include = "/usr/include"

# [target.x86_64-unknown-linux-musl.openssl]
# rustc-link-search = ["/usr/lib"]
# rustc-link-lib = ["static=ssl", "static=crypto"]
# rustc-cfg = ["libressl"]
# include = "/usr/include"
# libressl = "true"
# version = "101"

# Static version doesn't exist on Alpine... FFS
# [target.x86_64-unknown-linux-musl.curl]
# rustc-link-search = ["/usr/lib"]
# rustc-link-lib = ["static=curl"]

# Static version doesn't exist on Alpine... FFS
# [target.x86_64-unknown-linux-musl.git2]
# rustc-link-search = ["/usr/lib"]
# rustc-link-lib = ["static=git2"]
