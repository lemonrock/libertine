#!/usr/bin/env sh
# This file is part of libertine. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT. No part of libertine, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of libertine. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT.


_program()
{
	core_usesIn libertine prepare architecture networking path compile env configsite cmake hash openssl
	core_dependency_requires '*' rm
	libertine()
	{
		umask 0000
		
		libertine_prepare_checkPathsDoNotHaveSpacesInThemAsAutoconfEtcToolsDoNotProperlyHandleThem
		
		libertine_prepare_setEssentialGlobalVariables
		
		libertine_prepare_sourceConfiguration
		
		libertine_prepare_sharedCacheFolders
		
		libertine_prepare_machineOutputFolders
		
		libertine_prepare_setEssentialMachineGlobalVariables

		libertine_prepare_initialiseUidGid
		
		# TODO: Document this 'hack' - we have to know this data in advance of using musl-cross-make
		. "$libertine_machineInputPackagesPath"/musl_cross_make/compiler-details
		
		libertine_architecture_configure
		
		libertine_networking_configure
		
		libertine_openssl_certificateAuthorityLock_addLockTrapHandler
		
		libertine_compile_prepare
		
		libertine_env_cleanse

		_libertine_compile_machineLock_acquirePerMachineMutexLock "$libertine_machine"
			
			libertine_machineCacheOutputFolderPath="$libertine_machineCachesOutputFolderPath"/"$libertine_machine"
			
			rm -rf "$libertine_machineCacheOutputFolderPath"
			
			libertine_compile_calculateDependencies
		
			libertine_compile_calculateHashes
			
			libertine_compile_linuxX
		
			libertine_compile_copyOverFinishedBuildProducts
		
		_libertine_compile_machineLock_releasePerMachineMutexLock
	
		core_message NOTICE "Finished"
	}
}

_program_path_find()
{
	if [ "${_program_fattening_program_path+set}" = 'set' ]; then
		printf '%s\n' "$_program_fattening_program_path"

	elif [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi

	else

		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}

		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi

		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"

				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$0"

				while [ -L "$scriptPath" ]
				do
					_program_path_find_parentPath
					scriptPath="$(readlink "$scriptPath")"
				done

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"

				_program_path_find_parentPath
				pwd -P
			)
		fi

	fi
}

_program_name='libertine'
_program_version='unversioned'
_program_package_or_build=''
_program_path="$(_program_path_find)"
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_entrypoint='libertine'

_program_commandLine_parseInitialise()
{
	_program_default_machine='example'
	_program_default_machinesPath="$_program_path"/machines
	_program_default_authorityPath="$_program_path"/certificate-authority
	_program_default_outputPath="$_program_path"/output
	_program_default_makeDebug=false
	_program_default_configuration="$_program_etcPath"/shellfire/libertine/libertine.config
}

_program_commandLine_helpMessage()
{
	_program_commandLine_helpMessage_usage="[OPTION]..."
	_program_commandLine_helpMessage_description="Builds a Libertine Linux all-in-one kernel for a machine"
	_program_commandLine_helpMessage_options="
  -m, --machine NAME         Defaults to ${_program_default_machine}.
  -p, --machines-path PATH   PATH to parent folder of machine. Defaults to ${_program_default_machinesPath}
  -a, --authority-path PATH  PATH to certificate authority folder. Defaults to ${_program_default_authorityPath}
                             Must contain a file called 'libertine.openssl.cnf' and be writable.
  -d, --make-debug           Forces make to run serially. Defaults to off.
  -c, --configuration FILE   Path to FILE containing build machine configuration. Defaults to ${_program_default_configuration}
  -o, --output PATH          PATH to output folder. Default to ${_program_default_outputPath}"
    _program_commandLine_helpMessage_optionsSpacing='   '
	_program_commandLine_helpMessage_configurationKeys="
  libertine_machine        Equivalent to --machine
  libertine_machinesPath   Equivalent to --machines-path
  libertine_authorityPath  Equivalent to --authority-path
  libertine_makeDebug      Equivalent to --make-debug (if =true)
  libertine_outputPath     Equivalent to --output
"
	_program_commandLine_helpMessage_examples="
  ${_program_name} -- root=/dev/vda
"
}

_program_commandLine_optionExists()
{
	case "$optionName" in
		
		m|machine)
			echo 'yes-argumented'
		;;
		
		p|machines-path)
			echo 'yes-argumented'
		;;
		
		a|authority-path)
			echo 'yes-argumented'
		;;
		
		d|debug)
			echo 'yes-argumentless'
		;;
		
		c|configuration)
			echo 'yes-argumented'
		;;
		
		o|output)
			echo 'yes-argumented'
		;;
		
		*)
			echo 'no'
		;;
		
	esac
}

_program_commandLine_processOptionWithoutArgument()
{
	case "$optionName" in
		
		d|debug)
			_program_default_makeDebug=true
		;;
		
	esac
}

_program_commandLine_processOptionWithArgument()
{
	case "$optionName" in
		
		m|machine)
			libertine_machine="$optionValue"
		;;
		
		m|machines-path)
			core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			libertine_machinesPath="$optionValue"
		;;
		
		a|authority-path)
			core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			libertine_authorityPath="$optionValue"
		;;
		
		c|configuration)
			core_validate_filePathReadable $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			libertine_configuration="$optionValue"
		;;
		
		o|output)
			core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			libertine_outputPath="$optionValue"
		;;
		
	esac
}

_program_commandLine_handleNonOptions()
{
	core_variable_array_initialise libertine_nonOptions
	core_variable_array_append libertine_nonOptions "$@"
}

_program_commandLine_validate()
{
	if core_variable_isUnset libertine_machine; then
		libertine_machine="$_program_default_machine"
	else
		:
	fi
	
	if core_variable_isUnset libertine_machinesPath; then
		libertine_machinesPath="$_program_default_machinesPath"
	else
		core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_CONFIG 'configuration setting' 'libertine_machinesPath' "$libertine_machinesPath"
	fi
	
	if core_variable_isUnset libertine_authorityPath; then
		libertine_authorityPath="$_program_default_authorityPath"
	else
		core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_CONFIG 'configuration setting' 'libertine_authorityPath' "$libertine_authorityPath"
	fi
	
	if core_variable_isUnset libertine_makeDebug; then
		libertine_makeDebug="$_program_default_makeDebug"
	else
		:
	fi
	
	if core_variable_isUnset libertine_configuration; then
		libertine_configuration="$_program_default_configuration"
	else
		core_validate_filePathReadable $core_commandLine_exitCode_CONFIG 'configuration setting' 'libertine_configuration' "$libertine_configuration"
	fi
	
	if core_variable_isUnset libertine_outputPath; then
		libertine_outputPath="$_program_default_outputPath"
	else
		core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_CONFIG 'configuration setting' 'libertine_outputPath' "$libertine_outputPath"
	fi
}

# Assumes pwd, and so requires this code to be running from this folder
. "$_program_libPath"/shellfire/core/init.functions "$@"
