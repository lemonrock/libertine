#!/usr/bin/env sh
# This file is part of libertine. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT. No part of libertine, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016-2018 The developers of libertine. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT.


set -e
set -u
set -f


_program_path_find()
{
	if [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi

	else

		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}

		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi

		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"

				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$0"

				while [ -L "$scriptPath" ]
				do
					_program_path_find_parentPath
					scriptPath="$(readlink "$scriptPath")"
				done

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"

				_program_path_find_parentPath
				pwd -P
			)
		fi

	fi
}

# If we have a build_openssh then we can do this as run time
create_ssh_key_pair()
{
	local keyPairType="$1"
	
	local program="$(type -p ssh-keygen)"
	
	if [ -z "$program" ]; then
		printf '%s\n' "Could not generate host key pair for $keyPairType for the example machine as ssh-keygen is not in the PATH; please it in machines/example/settings/initramfs/etc/ssh/ssh_host_${keyPairType}_key and ssh_host_${keyPairType}_key.pub"
		return 0
	fi
	
	case "$keyPairType" in
		
		dsa)
			set -- -b 1024
		;;
		
		ecdsa)
			set -- -b 521
		;;
		
		ed25519)
			set --
		;;
		
		rsa)
			set -- -b 4096
		;;
		
	esac
	
	IFS=
	
	set +e
		ssh-keygen -q "$@" -t "$keyPairType" -N '' -C "$keyPairType host key for example machine" -f machines/example/settings/initramfs/etc/ssh/"ssh_host_${keyPairType}_key"
	set -e
	
	if [ $? -ne 0 ]; then
		printf '%s\n' "Could not generate a $keyPairType host key pair for the example machine using ssh-keygen; please create it in machines/example/settings/initramfs/etc/ssh/ssh_host_${keyPairType}_key and ssh_host_${keyPairType}_key.pub"
	fi
}

run_after_clone_main()
{
	cd "$(_program_path_find)" 1>/dev/null 2>/dev/null
	
	git submodule update --init --recursive
	
	cd "packages" 1>/dev/null 2>/dev/null
	
		./checkout-submodules-to-master
	
	cd - 1>/dev/null 2>/dev/null
	
	umask 7077
	
	create_ssh_key_pair 'ed25519'
	create_ssh_key_pair 'rsa'
	create_ssh_key_pair 'ecdsa'
}

run_after_clone_main "$@"
